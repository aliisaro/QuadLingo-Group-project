Index: src/main/java/View/Profile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.UserController;\r\nimport DAO.UserDaoImpl;\r\nimport Main.SessionManager;\r\nimport Model.User;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Profile extends BasePage {\r\n    private UserController userController; // UserController object\r\n\r\n    public Profile(Stage stage) {\r\n        // Initialize UserDaoImpl and UserController objects\r\n        userController = new UserController(new UserDaoImpl());\r\n\r\n        // Get the current logged-in user from the session\r\n        User currentUser = SessionManager.getInstance().getCurrentUser();\r\n\r\n        // If user is not logged in, redirect to index page\r\n        if (!SessionManager.getInstance().isLoggedIn()) {\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n            return;\r\n        }\r\n\r\n        // Set layout to the stage\r\n        setLayout(stage, currentUser);\r\n    }\r\n\r\n    private void setLayout(Stage stage, User currentUser) {\r\n        // Page title\r\n        Label pageTitle = new Label(\"Profile\");\r\n\r\n        // Display current user's username, email, and password\r\n        Label usernameLabel = new Label(\"Username: \" + currentUser.getUsername());\r\n        Label emailLabel = new Label(\"Email: \" + currentUser.getEmail());\r\n        Label passwordLabel = new Label(\"Password: **********\");\r\n\r\n        // Change username field\r\n        Label changeUsernameLabel = new Label(\"Change username:\");\r\n        TextField usernameTextField = new TextField();\r\n\r\n        // Change email field\r\n        Label changeEmailLabel = new Label(\"Change email:\");\r\n        TextField emailTextField = new TextField();\r\n\r\n        // Change password field\r\n        Label changePasswordLabel = new Label(\"Change password:\");\r\n        PasswordField passwordTextField = new PasswordField();\r\n\r\n        // Labels for error and success messages\r\n        Label errorLabel = new Label();\r\n        errorLabel.setStyle(\"-fx-text-fill: red;\");\r\n\r\n        Label successLabel = new Label();\r\n        successLabel.setStyle(\"-fx-text-fill: green;\");\r\n\r\n        // Save Button to handle saving the profile information\r\n        Button saveButton = new Button(\"Save\");\r\n        saveButton.setOnAction(e -> handleSaveAction(usernameTextField, emailTextField, passwordTextField, currentUser, errorLabel, successLabel));\r\n\r\n        // Return to the homepage\r\n        Button backButton = new Button(\"Back to Main\");\r\n        backButton.setOnAction(e -> stage.setScene(new Homepage(stage).createScene()));\r\n\r\n        // Go to the Progress page\r\n        Button buttonProgress = new Button(\"Go to Progress\");\r\n        buttonProgress.setOnAction(e -> stage.setScene(new ProgressPage(stage).createScene()));\r\n\r\n        // Logout button: clears session and redirects to IndexPage\r\n        Button logoutButton = new Button(\"Logout\");\r\n        logoutButton.setOnAction(e -> {\r\n            SessionManager.getInstance().logout();\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n        });\r\n\r\n        this.getChildren().addAll(\r\n                pageTitle,\r\n                usernameLabel,\r\n                emailLabel,\r\n                passwordLabel,\r\n                changeUsernameLabel,\r\n                usernameTextField,\r\n                changeEmailLabel,\r\n                emailTextField,\r\n                changePasswordLabel,\r\n                passwordTextField,\r\n                saveButton,\r\n                backButton,\r\n                buttonProgress,\r\n                logoutButton,\r\n                errorLabel,\r\n                successLabel\r\n        );\r\n    }\r\n\r\n    // Logic to handle saving the profile information\r\n    private void handleSaveAction(TextField usernameTextField, TextField emailTextField, PasswordField passwordTextField, User currentUser, Label errorLabel, Label successLabel) {\r\n        UserController userController = UserController.getInstance(UserDaoImpl.getInstance()); // Initialize UserController\r\n\r\n        // Trim whitespace from inputs\r\n        String username = usernameTextField.getText().trim();\r\n        String email = emailTextField.getText().trim();\r\n        String password = passwordTextField.getText().trim();\r\n\r\n        // Check if all fields are empty\r\n        if (username.isEmpty() && email.isEmpty() && password.isEmpty()) {\r\n            errorLabel.setText(\"At least one field must be filled out to update the profile.\");\r\n            successLabel.setText(\"\"); // Clear success message\r\n            return; // Exit the method early\r\n        }\r\n\r\n        StringBuilder errorMessages = new StringBuilder(); // Object to store error messages\r\n\r\n        // Validate username if provided\r\n        if (!username.isEmpty() && !username.equals(currentUser.getUsername())) {\r\n            currentUser.setUsername(username);\r\n        }\r\n\r\n        // Validate email if provided\r\n        if (!email.isEmpty() && !email.equals(currentUser.getEmail())) {\r\n            if (!email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\")) {\r\n                errorMessages.append(\"Invalid email format.\\n\");\r\n            } else if (userController.doesEmailExist(email)) {\r\n                errorMessages.append(\"An account with this email already exists.\\n\");\r\n            } else {\r\n                currentUser.setEmail(email);\r\n            }\r\n        }\r\n\r\n        // Validate password if provided\r\n        if (!password.isEmpty()) {\r\n            if (!password.matches(\".*[A-Z].*\")) {\r\n                errorMessages.append(\"Password must include at least 1 uppercase letter.\\n\");\r\n            }\r\n            if (!password.matches(\".*\\\\d.*\")) {\r\n                errorMessages.append(\"Password must include at least 1 number.\\n\");\r\n            }\r\n            if (password.length() < 8) {\r\n                errorMessages.append(\"Password must be at least 8 characters.\\n\");\r\n            } else {\r\n                currentUser.setPassword(password, true);\r\n            }\r\n        }\r\n\r\n        // If there are errors, display them\r\n        if (errorMessages.length() > 0) {\r\n            errorLabel.setText(errorMessages.toString());\r\n            successLabel.setText(\"\"); // Clear success message\r\n        } else {\r\n            // If no errors, update the user\r\n            boolean isUpdated = userController.updateUser(currentUser);\r\n            if (isUpdated) {\r\n                successLabel.setText(\"Profile updated successfully.\");\r\n                errorLabel.setText(\"\"); // Clear error message\r\n\r\n                System.out.println(\"Profile updated successfully:\");\r\n                System.out.println(\"Username: \" + currentUser.getUsername());\r\n                System.out.println(\"Email: \" + currentUser.getEmail());\r\n                System.out.println(\"Password: ********* \\n\");\r\n\r\n                // Clear the input fields\r\n                usernameTextField.clear();\r\n                emailTextField.clear();\r\n                passwordTextField.clear();\r\n\r\n                // Refresh the page to display updated info\r\n                refreshProfilePage();\r\n            } else {\r\n                errorLabel.setText(\"Failed to update profile.\");\r\n                successLabel.setText(\"\"); // Clear success message\r\n                System.out.println(\"Failed to update profile.\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Method to refresh the profile page\r\n    private void refreshProfilePage() {\r\n        Stage currentStage = (Stage) this.getScene().getWindow();\r\n        currentStage.setScene(new Profile(currentStage).createScene());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/View/Profile.java b/src/main/java/View/Profile.java
--- a/src/main/java/View/Profile.java	(revision 3bbc5027521789098f75d888df179e3ab6053feb)
+++ b/src/main/java/View/Profile.java	(date 1728231931695)
@@ -8,8 +8,8 @@
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
 import javafx.scene.control.PasswordField;
-import javafx.scene.control.ScrollPane;
 import javafx.scene.control.TextField;
+import javafx.scene.layout.HBox;
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
 
@@ -34,8 +34,16 @@
     }
 
     private void setLayout(Stage stage, User currentUser) {
+        // Apply padding directly to 'this' (inheriting VBox)
+        this.setPadding(new Insets(10));
+        this.setSpacing(5); // Add spacing between all child elements
+
         // Page title
         Label pageTitle = new Label("Profile");
+        pageTitle.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // Set VBox margin for the title
+        VBox.setMargin(pageTitle, new Insets(0, 0, 0, 130));
 
         // Display current user's username, email, and password
         Label usernameLabel = new Label("Username: " + currentUser.getUsername());
@@ -61,25 +69,46 @@
         Label successLabel = new Label();
         successLabel.setStyle("-fx-text-fill: green;");
 
+        // Create a container (HBox) for save and logout buttons
+        HBox buttonContainer1 = new HBox(10);
+
+        // Create a container (HBox) for back and progress buttons
+        HBox buttonContainer2 = new HBox(10);
+
         // Save Button to handle saving the profile information
-        Button saveButton = new Button("Save");
+        Button saveButton = new Button("Save changes");
+        saveButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 165");
         saveButton.setOnAction(e -> handleSaveAction(usernameTextField, emailTextField, passwordTextField, currentUser, errorLabel, successLabel));
 
-        // Return to the homepage
-        Button backButton = new Button("Back to Main");
-        backButton.setOnAction(e -> stage.setScene(new Homepage(stage).createScene()));
-
-        // Go to the Progress page
-        Button buttonProgress = new Button("Go to Progress");
-        buttonProgress.setOnAction(e -> stage.setScene(new ProgressPage(stage).createScene()));
-
         // Logout button: clears session and redirects to IndexPage
         Button logoutButton = new Button("Logout");
+        logoutButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 165");
         logoutButton.setOnAction(e -> {
             SessionManager.getInstance().logout();
             stage.setScene(new IndexPage(stage).createScene());
         });
 
+        // Back to the homepage
+        Button backButton = new Button("Back to homepage");
+        backButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px;  -fx-pref-width: 165");
+        backButton.setOnAction(e -> stage.setScene(new Homepage(stage).createScene()));
+
+        // Go to the Progress page
+        Button buttonProgress = new Button("Go to Progress");
+        buttonProgress.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 165");
+        buttonProgress.setOnAction(e -> stage.setScene(new ProgressPage(stage).createScene()));
+
+        // Add buttons to the first button container
+        buttonContainer1.getChildren().addAll(saveButton, logoutButton);
+
+        // Add buttons to the second button container
+        buttonContainer2.getChildren().addAll(backButton, buttonProgress);
+
+        // Add an empty label for spacing
+        Label spacerLabel = new Label();
+        spacerLabel.setMinHeight(10); // Set a minimum height for the spacer
+
+        // Add all components to the main layout
         this.getChildren().addAll(
                 pageTitle,
                 usernameLabel,
@@ -91,10 +120,9 @@
                 emailTextField,
                 changePasswordLabel,
                 passwordTextField,
-                saveButton,
-                backButton,
-                buttonProgress,
-                logoutButton,
+                spacerLabel,
+                buttonContainer1,
+                buttonContainer2,
                 errorLabel,
                 successLabel
         );
Index: src/main/java/View/QuizLibrary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.UserController;\r\nimport Controller.QuizController; // Ensure you have a QuizController\r\nimport DAO.ProgressDaoImpl;\r\nimport DAO.UserDaoImpl;\r\nimport DAO.QuizDaoImpl;\r\nimport Database.MariaDbConnection;\r\nimport Main.SessionManager;\r\nimport Model.User;\r\nimport Model.Quiz;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.control.ProgressBar;\r\n\r\nimport java.sql.Connection;\r\nimport java.util.List;\r\n\r\npublic class QuizLibrary extends BasePage implements UpdateProgress {\r\n    private final UserController userController = new UserController(new UserDaoImpl()); // UserController object\r\n    private QuizController quizController; // QuizController object\r\n    private final ProgressBar progressBar1 = ProgressPage.getProgressBar1();\r\n    private final ProgressBar progressBar2 = ProgressPage.getProgressBar2();\r\n    private final ProgressDaoImpl progressDao = new ProgressDaoImpl();\r\n    private final int userID = userController.getCurrentUserId();\r\n\r\n    public QuizLibrary(Stage stage) {\r\n        // Initialize UserDaoImpl and UserController objects\r\n\r\n        // Get the current logged-in user from the session\r\n        User currentUser = SessionManager.getInstance().getCurrentUser();\r\n\r\n        // If user is not logged in, redirect to index page\r\n        if (!SessionManager.getInstance().isLoggedIn()) {\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n            return;\r\n        }\r\n\r\n        // Initialize QuizController with database connection\r\n        Connection connection = MariaDbConnection.getConnection();\r\n        quizController = new QuizController(new QuizDaoImpl(connection));\r\n\r\n        // Set layout to the stage\r\n        setLayout(stage, currentUser, connection);\r\n    }\r\n\r\n    private void setLayout(Stage stage, User currentUser, Connection connection) {\r\n        // Page title\r\n        Label pageTitle = new Label(\"Quiz Library\");\r\n        pageTitle.setStyle(\"-fx-font-size: 24px; -fx-padding: 10px;\");\r\n\r\n        // Return to the homepage\r\n        Button backButton = new Button(\"Back to Homepage\");\r\n        backButton.setOnAction(e -> stage.setScene(new Homepage(stage).createScene()));\r\n\r\n        // Logout button: clears session and redirects to IndexPage\r\n        Button logoutButton = new Button(\"Logout\");\r\n        logoutButton.setOnAction(e -> {\r\n            SessionManager.getInstance().logout();\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n        });\r\n\r\n        // Fetch all quizzes from the database\r\n        List<Quiz> quizzes = quizController.getAllQuizzes();\r\n\r\n        // VBox to hold quiz buttons\r\n        VBox quizzesBox = new VBox(10);\r\n        quizzesBox.setPadding(new Insets(10));\r\n        quizzesBox.setStyle(\"-fx-background-color: #FFFFFF; -fx-padding: 10px; -fx-spacing: 10px;\");\r\n\r\n        for (Quiz quiz : quizzes) {\r\n            Button quizButton = new Button(quiz.getQuizTitle());\r\n            quizButton.setMaxWidth(350); // Make buttons stretch horizontally\r\n            quizButton.setStyle(\"-fx-font-size: 16px; -fx-padding: 10px;\");\r\n\r\n            // Set action to navigate to the QuizPage\r\n            quizButton.setOnAction(e -> {\r\n                QuizPage quizPage = new QuizPage(quizController.getQuizDao(), quiz.getQuizId(), stage);\r\n                stage.setScene(quizPage.createScene());\r\n            });\r\n\r\n            quizzesBox.getChildren().add(quizButton);\r\n        }\r\n\r\n        updateQuizProgress(progressBar1);\r\n        updateScoreProgress(progressBar2);\r\n\r\n        // Add all components to the layout\r\n        this.getChildren().addAll(\r\n                pageTitle,\r\n                quizzesBox,\r\n                backButton,\r\n                logoutButton\r\n        );\r\n\r\n    }\r\n\r\n    @Override\r\n    public void updateQuizProgress(ProgressBar progressBar) {\r\n        int completedQuizzes = userController.getQuizzesCompleted(userID);\r\n        int allQuizzes = quizController.getAllQuizzes().size();\r\n        double progress = (double) completedQuizzes / allQuizzes;\r\n        progressBar.setProgress(progress);\r\n    }\r\n\r\n    @Override\r\n    public void updateScoreProgress(ProgressBar progressBar) {\r\n        int userScore = progressDao.getUserScore(userID);\r\n        int maxScore = progressDao.getMaxScore(userID);\r\n        double progress = (double) userScore / maxScore;\r\n        progressBar.setProgress(progress);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/View/QuizLibrary.java b/src/main/java/View/QuizLibrary.java
--- a/src/main/java/View/QuizLibrary.java	(revision 3bbc5027521789098f75d888df179e3ab6053feb)
+++ b/src/main/java/View/QuizLibrary.java	(date 1728231498449)
@@ -12,6 +12,7 @@
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
+import javafx.scene.layout.HBox;
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
 import javafx.scene.control.ProgressBar;
@@ -52,24 +53,35 @@
         Label pageTitle = new Label("Quiz Library");
         pageTitle.setStyle("-fx-font-size: 24px; -fx-padding: 10px;");
 
+        // Set VBox alignment to center the title
+        VBox.setMargin(pageTitle, new Insets(0, 0, 0, 100));
+
         // Return to the homepage
         Button backButton = new Button("Back to Homepage");
+        backButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 165;");
         backButton.setOnAction(e -> stage.setScene(new Homepage(stage).createScene()));
 
         // Logout button: clears session and redirects to IndexPage
         Button logoutButton = new Button("Logout");
+        logoutButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 165;");
         logoutButton.setOnAction(e -> {
             SessionManager.getInstance().logout();
             stage.setScene(new IndexPage(stage).createScene());
         });
 
+        // Group buttons in an HBox for better alignment
+        HBox buttonBox = new HBox(10); // Set spacing between buttons (10px)
+        buttonBox.setPadding(new Insets(10, 0, 10, 0));
+        buttonBox.setStyle("-fx-alignment: center;"); // Center the buttons horizontally
+        buttonBox.getChildren().addAll(backButton, logoutButton);
+
         // Fetch all quizzes from the database
         List<Quiz> quizzes = quizController.getAllQuizzes();
 
         // VBox to hold quiz buttons
         VBox quizzesBox = new VBox(10);
         quizzesBox.setPadding(new Insets(10));
-        quizzesBox.setStyle("-fx-background-color: #FFFFFF; -fx-padding: 10px; -fx-spacing: 10px;");
+        quizzesBox.setStyle("-fx-padding: 10px; -fx-spacing: 10px;");
 
         for (Quiz quiz : quizzes) {
             Button quizButton = new Button(quiz.getQuizTitle());
@@ -92,8 +104,7 @@
         this.getChildren().addAll(
                 pageTitle,
                 quizzesBox,
-                backButton,
-                logoutButton
+                buttonBox
         );
 
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6436838c-4e0c-4eac-a79b-699bd6f9f1fa\" name=\"Changes\" comment=\"muokkasin profile ja registartion sivuja\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/DAO/QuizDao.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/DAO/QuizDao.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/DAO/QuizDaoImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/DAO/QuizDaoImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/View/QuizPage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/View/QuizPage.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\">\r\n    <execution />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"CSS File\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;aliisaro&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/aliisaro/QuadLingo-Group-project&quot;,\r\n    &quot;accountId&quot;: &quot;8f5e8fcd-3279-4d3f-a7b4-f0c0f2ce3e5e&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ldrDNfiM8m3jlfvzodxyvc4LUp\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.Profile.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.QuadLingoQui.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.UserTests.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Asus/OneDrive/Työpöytä/Metropolia/Ohjelmistoprojekti/QuadLingo&quot;,\r\n    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Global Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mariadb&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"UserTests\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"QuadLingo\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"UserTests\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.UserTests\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6436838c-4e0c-4eac-a79b-699bd6f9f1fa\" name=\"Changes\" comment=\"\" />\r\n      <created>1725520675708</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1725520675708</updated>\r\n      <workItem from=\"1725520677142\" duration=\"3665000\" />\r\n      <workItem from=\"1725607627641\" duration=\"85000\" />\r\n      <workItem from=\"1725967212843\" duration=\"7070000\" />\r\n      <workItem from=\"1726035785371\" duration=\"3040000\" />\r\n      <workItem from=\"1726051174980\" duration=\"1433000\" />\r\n      <workItem from=\"1726122772219\" duration=\"15000\" />\r\n      <workItem from=\"1726210037939\" duration=\"833000\" />\r\n      <workItem from=\"1726215998453\" duration=\"25846000\" />\r\n      <workItem from=\"1726642703812\" duration=\"4690000\" />\r\n      <workItem from=\"1726688017923\" duration=\"84000\" />\r\n      <workItem from=\"1726688117305\" duration=\"1634000\" />\r\n      <workItem from=\"1726726620255\" duration=\"22000\" />\r\n      <workItem from=\"1726750020136\" duration=\"375000\" />\r\n      <workItem from=\"1727245927846\" duration=\"4750000\" />\r\n      <workItem from=\"1727600129175\" duration=\"9000\" />\r\n      <workItem from=\"1727600251351\" duration=\"623000\" />\r\n      <workItem from=\"1727678034370\" duration=\"114000\" />\r\n      <workItem from=\"1727678176958\" duration=\"2940000\" />\r\n      <workItem from=\"1727893438395\" duration=\"9521000\" />\r\n      <workItem from=\"1727938402406\" duration=\"8193000\" />\r\n      <workItem from=\"1727960986358\" duration=\"1333000\" />\r\n      <workItem from=\"1727970631091\" duration=\"998000\" />\r\n      <workItem from=\"1727978820087\" duration=\"2693000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"pushaan cindyn version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726648846401</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726648846401</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Nyt pitäis toimii login kunnolla\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726689459954</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726689459954</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"login pitäsi toimia nyt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726726796491</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726726796491</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"createOverallProgress method commented\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727337465743</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727337465743</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"lisäsin updateUser että profiilissa voi käyttäjä päivittää omia tietojaan, mutta sähköpostin päivittäminen ei vielä toimi. Lisäsin kans email validation Registration sivulle.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727345542694</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727345542694</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"muokkasin profile ja registartion sivuja\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727952502577</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727952502577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added user test for creating a user, added jenkinsfile and updated pom.xml\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727972091032</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727972091032</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"en tiedä\" />\r\n    <MESSAGE value=\"pushaan cindyn version\" />\r\n    <MESSAGE value=\"Nyt pitäis toimii login kunnolla\" />\r\n    <MESSAGE value=\"login pitäsi toimia nyt\" />\r\n    <MESSAGE value=\"createOverallProgress method commented\" />\r\n    <MESSAGE value=\"lisäsin updateUser että profiilissa voi käyttäjä päivittää omia tietojaan, mutta sähköpostin päivittäminen ei vielä toimi. Lisäsin kans email validation Registration sivulle.\" />\r\n    <MESSAGE value=\"Added functional quizzes + quiz progress is saved for user in the ISCOMPLETED table\" />\r\n    <MESSAGE value=\"muokkasin profile ja registartion sivuja\" />\r\n    <MESSAGE value=\"added user test for creating a user, added jenkinsfile and updated pom.xml\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added user test for creating a user, added jenkinsfile and updated pom.xml\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 30808263c6dfee0e573a9871eb4daeb4aa0677a8)
+++ b/.idea/workspace.xml	(date 1728232000216)
@@ -4,10 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="6436838c-4e0c-4eac-a79b-699bd6f9f1fa" name="Changes" comment="muokkasin profile ja registartion sivuja">
+    <list default="true" id="6436838c-4e0c-4eac-a79b-699bd6f9f1fa" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/DAO/QuizDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/DAO/QuizDao.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/DAO/QuizDaoImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/DAO/QuizDaoImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/View/Profile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/View/Profile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/View/QuizLibrary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/View/QuizLibrary.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/View/QuizPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/View/QuizPage.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -61,36 +61,36 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
-    &quot;Application.Profile.executor&quot;: &quot;Run&quot;,
-    &quot;Application.QuadLingoQui.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.UserTests.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/Asus/OneDrive/Työpöytä/Metropolia/Ohjelmistoprojekti/QuadLingo&quot;,
-    &quot;list.type.of.created.stylesheet&quot;: &quot;CSS&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Global Libraries&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Application.Main.executor": "Run",
+    "Application.Profile.executor": "Run",
+    "Application.QuadLingoQui.executor": "Run",
+    "JUnit.UserTests.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "aliisa",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/Asus/OneDrive/Työpöytä/Metropolia/Ohjelmistoprojekti/QuadLingo",
+    "list.type.of.created.stylesheet": "CSS",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Global Libraries",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.2",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;DatabaseDriversLRU&quot;: [
-      &quot;mariadb&quot;
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "mariadb"
     ]
   }
-}</component>
+}]]></component>
   <component name="RunManager">
     <configuration name="UserTests" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="QuadLingo" />
@@ -104,6 +104,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="JUnit.UserTests" />
+        <item itemvalue="JUnit.UserTests" />
+        <item itemvalue="JUnit.UserTests" />
+        <item itemvalue="JUnit.UserTests" />
+        <item itemvalue="JUnit.UserTests" />
       </list>
     </recent_temporary>
   </component>
@@ -146,6 +150,8 @@
       <workItem from="1727960986358" duration="1333000" />
       <workItem from="1727970631091" duration="998000" />
       <workItem from="1727978820087" duration="2693000" />
+      <workItem from="1727982018480" duration="21000" />
+      <workItem from="1728202723590" duration="8439000" />
     </task>
     <task id="LOCAL-00001" summary="pushaan cindyn version">
       <option name="closed" value="true" />
Index: src/main/java/View/QuizPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport DAO.QuizDao;\r\nimport Main.SessionManager;\r\nimport Model.Question;\r\nimport Model.User;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.util.List;\r\n\r\npublic class QuizPage extends BasePage {\r\n    private QuizDao quizDao;\r\n    private List<Question> questions;\r\n    private int quizId;\r\n    private int currentQuestionIndex = 0;\r\n    private int score = 0;\r\n    private Label questionLabel;\r\n    private ToggleGroup answerGroup;\r\n    private RadioButton[] answerButtons;\r\n    private Label errorLabel;\r\n\r\n    public QuizPage(QuizDao quizDao, int quizId, Stage stage) {\r\n        this.quizDao = quizDao;\r\n        this.questions = quizDao.getQuestionsForQuiz(quizId); // Load questions based on quizId\r\n        this.quizId = quizId;\r\n\r\n        // Check if the user is logged in\r\n        if (!SessionManager.getInstance().isLoggedIn()) {\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n            return;\r\n        }\r\n\r\n        initializeUI(stage); // Initialize UI components\r\n        loadQuestion(); // Load the first question\r\n    }\r\n\r\n    private void initializeUI(Stage stage) {\r\n        // Initialize question label\r\n        questionLabel = new Label();\r\n        questionLabel.setWrapText(true);\r\n        questionLabel.setStyle(\"-fx-font-size: 14px; -fx-font-weight: bold;\");\r\n\r\n        // Initialize ToggleGroup for answers\r\n        answerGroup = new ToggleGroup();\r\n\r\n        // Initialize RadioButtons for answer options\r\n        answerButtons = new RadioButton[4]; // Assuming a maximum of 4 options\r\n        VBox answersBox = new VBox(10);\r\n        answersBox.setPadding(new Insets(10, 0, 10, 0));\r\n\r\n        for (int i = 0; i < answerButtons.length; i++) {\r\n            answerButtons[i] = new RadioButton();\r\n            answerButtons[i].setToggleGroup(answerGroup);\r\n            answerButtons[i].setWrapText(true);\r\n            answerButtons[i].setStyle(\"-fx-font-size: 16px;\");\r\n            answersBox.getChildren().add(answerButtons[i]);\r\n        }\r\n\r\n        // Initialize Submit Button\r\n        Button submitButton = new Button(\"Submit Answer\");\r\n        submitButton.setStyle(\"-fx-font-size: 16px; -fx-padding: 10px;\");\r\n        submitButton.setOnAction(e -> handleSubmitAnswer());\r\n\r\n        // Initialize error label\r\n        errorLabel = new Label();\r\n        errorLabel.setStyle(\"-fx-text-fill: red;\");\r\n\r\n        // Logout button\r\n        Button logoutButton = new Button(\"Logout\");\r\n        logoutButton.setOnAction(e -> {\r\n            SessionManager.getInstance().logout();\r\n            stage.setScene(new IndexPage(stage).createScene());\r\n        });\r\n\r\n        // Add all components to the layout\r\n        this.getChildren().addAll(questionLabel, answersBox, submitButton, errorLabel, logoutButton);\r\n    }\r\n\r\n    private void loadQuestion() {\r\n        // Reset the answer selection for the new question\r\n        answerGroup.selectToggle(null);\r\n        errorLabel.setText(\"\"); // Clear any previous error message\r\n\r\n        // Check if there are more questions to load\r\n        if (currentQuestionIndex < questions.size()) {\r\n            Question question = questions.get(currentQuestionIndex); // Get the current question\r\n            questionLabel.setText((currentQuestionIndex + 1) + \". \" + question.getQuestionText()); // Display question text\r\n\r\n            List<String> answerOptions = question.getAnswerOptions(); // Get answer options\r\n\r\n            // Load the answer options into radio buttons\r\n            for (int i = 0; i < answerButtons.length; i++) {\r\n                if (i < answerOptions.size()) {\r\n                    answerButtons[i].setText(answerOptions.get(i)); // Set text for radio button\r\n                    answerButtons[i].setVisible(true); // Show radio button\r\n                } else {\r\n                    answerButtons[i].setVisible(false); // Hide if there are no more options\r\n                }\r\n            }\r\n        } else {\r\n            showFinalScore(); // Show final score if no more questions\r\n        }\r\n    }\r\n\r\n    private void handleSubmitAnswer() {\r\n        RadioButton selectedButton = (RadioButton) answerGroup.getSelectedToggle(); // Get selected button\r\n        if (selectedButton != null) {\r\n            String selectedAnswer = selectedButton.getText(); // Get text of selected answer\r\n            Question currentQuestion = questions.get(currentQuestionIndex); // Get current question\r\n\r\n            // Check if the selected answer is correct\r\n            if (quizDao.checkAnswer(currentQuestion.getQuestionId(), selectedAnswer)) {\r\n                score++; // Increment score for correct answer\r\n            }\r\n\r\n            currentQuestionIndex++; // Move to next question\r\n            loadQuestion(); // Load the next question\r\n        } else {\r\n            // Display error message in the UI instead of an alert\r\n            errorLabel.setText(\"Please select an answer before submitting.\");\r\n        }\r\n    }\r\n\r\n    private void showFinalScore() {\r\n        // Clear existing content\r\n        this.getChildren().clear();\r\n        this.setPadding(new Insets(20));\r\n\r\n        // Display final score\r\n        Label scoreLabel = new Label(\"Quiz Finished!\");\r\n        scoreLabel.setStyle(\"-fx-font-size: 24px; -fx-font-weight: bold;\");\r\n\r\n        Label resultLabel = new Label(\"Your score: \" + score + \" out of \" + questions.size());\r\n        resultLabel.setStyle(\"-fx-font-size: 18px;\");\r\n\r\n        // Get current user and quiz ID\r\n        User currentUser = SessionManager.getInstance().getCurrentUser(); // Get the current user\r\n        int userId = currentUser.getUserId(); // Get User ID\r\n\r\n        // Check if the user has already completed the quiz\r\n        boolean hasCompletedQuiz = quizDao.hasUserCompletedQuiz(userId, quizId);\r\n\r\n        // Always update the score for the quiz\r\n        quizDao.recordQuizCompletion(userId, quizId, score); // Save score to the database\r\n\r\n        // Increment completed quizzes count if the user has not taken the quiz before\r\n        if (!hasCompletedQuiz) {\r\n            quizDao.incrementCompletedQuizzes(userId); // Increment quiz count only if the user has not taken the quiz\r\n        }\r\n\r\n        // Add score labels to the layout\r\n        this.getChildren().addAll(scoreLabel, resultLabel);\r\n\r\n        // Button to return to Quiz Library\r\n        Button backButton = new Button(\"Back to Quiz Library\");\r\n        backButton.setStyle(\"-fx-font-size: 16px; -fx-padding: 10px;\");\r\n        backButton.setOnAction(e -> {\r\n            Stage stage = (Stage) this.getScene().getWindow();\r\n            stage.setScene(new QuizLibrary(stage).createScene());\r\n        });\r\n\r\n        // Add the back button to the layout\r\n        this.getChildren().add(backButton);\r\n    }\r\n\r\n    private void saveScore(int userId, int quizId, int score) {\r\n        quizDao.recordQuizCompletion(userId, quizId, score); // Call the method to record the quiz completion\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/View/QuizPage.java b/src/main/java/View/QuizPage.java
--- a/src/main/java/View/QuizPage.java	(revision 3bbc5027521789098f75d888df179e3ab6053feb)
+++ b/src/main/java/View/QuizPage.java	(date 1728231546187)
@@ -6,9 +6,12 @@
 import Model.User;
 import javafx.geometry.Insets;
 import javafx.scene.control.*;
+import javafx.scene.layout.HBox;
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
-
+import javafx.animation.PauseTransition;
+import javafx.util.Duration;
+import javafx.scene.paint.Color; // For color changes
 import java.util.List;
 
 public class QuizPage extends BasePage {
@@ -21,6 +24,7 @@
     private ToggleGroup answerGroup;
     private RadioButton[] answerButtons;
     private Label errorLabel;
+    private Label feedbackLabel;
 
     public QuizPage(QuizDao quizDao, int quizId, Stage stage) {
         this.quizDao = quizDao;
@@ -33,11 +37,14 @@
             return;
         }
 
-        initializeUI(stage); // Initialize UI components
+        setLayout(stage); // Initialize UI components
         loadQuestion(); // Load the first question
     }
 
-    private void initializeUI(Stage stage) {
+    private void setLayout(Stage stage) {
+        // Apply padding directly to 'this' (inheriting VBox)
+        this.setPadding(new Insets(20)); // 20px padding around the VBox
+
         // Initialize question label
         questionLabel = new Label();
         questionLabel.setWrapText(true);
@@ -59,24 +66,43 @@
             answersBox.getChildren().add(answerButtons[i]);
         }
 
+        // Label for immediate feedback once answer is submitted
+        feedbackLabel = new Label();
+        feedbackLabel.setVisible(false); // Initially hidden
+
         // Initialize Submit Button
         Button submitButton = new Button("Submit Answer");
-        submitButton.setStyle("-fx-font-size: 16px; -fx-padding: 10px;");
+        submitButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 175;");
         submitButton.setOnAction(e -> handleSubmitAnswer());
 
-        // Initialize error label
-        errorLabel = new Label();
-        errorLabel.setStyle("-fx-text-fill: red;");
+        // Initialize Cancel Button (to cancel the current quiz and go back)
+        Button cancelButton = new Button("Cancel Quiz");
+        cancelButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 150;");
+        cancelButton.setOnAction(e -> {
+            // Navigate back to Quiz Library without saving or finishing the quiz
+            stage.setScene(new QuizLibrary(stage).createScene());
+        });
 
         // Logout button
         Button logoutButton = new Button("Logout");
+        logoutButton.setStyle("-fx-font-size: 14px; -fx-padding: 10px; -fx-pref-width: 125;");
         logoutButton.setOnAction(e -> {
             SessionManager.getInstance().logout();
             stage.setScene(new IndexPage(stage).createScene());
         });
 
+        // Group buttons in an HBox for better alignment
+        HBox buttonBox = new HBox(10); // Set spacing between buttons (10px)
+        buttonBox.setPadding(new Insets(10, 0, 10, 0));
+        buttonBox.setStyle("-fx-alignment: center;"); // Center the buttons horizontally
+        buttonBox.getChildren().addAll(submitButton, cancelButton, logoutButton);
+
+        // Initialize error label
+        errorLabel = new Label();
+        errorLabel.setStyle("-fx-text-fill: red;");
+
         // Add all components to the layout
-        this.getChildren().addAll(questionLabel, answersBox, submitButton, errorLabel, logoutButton);
+        this.getChildren().addAll(questionLabel, answersBox, feedbackLabel, errorLabel, buttonBox);
     }
 
     private void loadQuestion() {
@@ -114,16 +140,29 @@
             // Check if the selected answer is correct
             if (quizDao.checkAnswer(currentQuestion.getQuestionId(), selectedAnswer)) {
                 score++; // Increment score for correct answer
+                feedbackLabel.setText("Correct!"); // Set feedback for correct answer
+                feedbackLabel.setTextFill(Color.GREEN); // Set text color to green
+            } else {
+                feedbackLabel.setText("Incorrect! The correct answer is: " + currentQuestion.getCorrectAnswer()); // Display correct answer
+                feedbackLabel.setTextFill(Color.RED); // Set text color to red
             }
 
-            currentQuestionIndex++; // Move to next question
-            loadQuestion(); // Load the next question
+            feedbackLabel.setVisible(true); // Show feedback label
+
+            // Add a brief pause before loading the next question
+            PauseTransition pause = new PauseTransition(Duration.seconds(1)); // Adjust the duration as needed
+            pause.setOnFinished(event -> {
+                currentQuestionIndex++; // Move to next question
+                loadQuestion(); // Load the next question
+            });
+            pause.play(); // Start the pause transition
         } else {
             // Display error message in the UI instead of an alert
             errorLabel.setText("Please select an answer before submitting.");
         }
     }
 
+
     private void showFinalScore() {
         // Clear existing content
         this.getChildren().clear();
@@ -156,7 +195,7 @@
 
         // Button to return to Quiz Library
         Button backButton = new Button("Back to Quiz Library");
-        backButton.setStyle("-fx-font-size: 16px; -fx-padding: 10px;");
+        backButton.setStyle("-fx-font-size: 16px; -fx-padding: 10px;-fx-pref-width: 180;");
         backButton.setOnAction(e -> {
             Stage stage = (Stage) this.getScene().getWindow();
             stage.setScene(new QuizLibrary(stage).createScene());
